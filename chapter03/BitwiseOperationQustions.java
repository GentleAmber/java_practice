/*
BitwiseOperationQustions
int a = 1 >> 2 
	//a = [00000000][00000000][00000000][00000001]
	//a >> 2 == [01000000][00000000][00000000][00000000] == 2^38

~-2 = ?
	//-2原码： 10000000 00000000 00000000 00000010
	//-2反码： 11111111 11111111 11111111 11111101
	//-2补码： 11111111 11111111 11111111 11111110
	//~-2（用补码运算）： 00000000 00000000 00000000 00000001
	//由于符号位是0，该数是正数。正数的反码==补码==原码，所以运算结果就是1

~2 = ?
	//2原码==反码==补码==00000000 00000000 00000000 00000010
	//~2==11111111 11111111 11111111 11111101
	//将该数还原为原码。由于符号位是1，该数是负数。
	//补码->反码：11111111 11111111 11111111 11111100
	//反码->原码：10000000 00000000 00000000 00000011
	故~2==-3

2^3 = ?
	//2原码==反码==补码==00000000 00000000 00000000 00000010
	//3原码==反码==补码==00000000 00000000 00000000 00000011
	//2^3 = 00000000 00000000 00000000 00000001为正数
	故2^3 = 1

2|3 = ?
	2|3 = 00000000 00000000 00000000 00000011 = 3

2&3 = ?
	//2 == [00000010], 3 == [00000011]
	//2&3 == [00000011] == 3

int a = 1 >> 2;
	1: 00000000 00000000 00000000 000000*01*
	1>>2:00000000 00000000 00000000 00000000 
	每右移一位，本质是JAVA内 a/2 （1/2=0）

int c=1<<2;
	1<<2:00000000 00000000 00000000 00000100
	每左移一位，本质是c*2
*/

public class BitwiseOperationQustions{
	public static void main(String[] args){

		System.out.println(2^3);//1
		System.out.println(2|3);//3
		System.out.println(4<<3);//32

	}
}